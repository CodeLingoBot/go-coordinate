// Code generated by go-bindata.
// sources:
// migrations/20150924-namespaces.sql~
// migrations/20150927-core.sql
// migrations/20150927-core.sql~
// DO NOT EDIT!

package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20150924NamespacesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x28\x2d\xe0\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xc8\x4b\xcc\x4d\x2d\x2e\x48\x4c\x4e\xd5\xe0\xca\x4c\x51\xf0\xf4\x0b\x71\x75\x77\x0d\x52\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\xd4\xe1\x02\x29\x51\x08\x73\x0c\x72\xf6\x70\x0c\x52\x08\xf5\xf3\x0c\x0c\x75\xe5\xd2\xb4\xe6\xe2\x42\x36\x36\x25\xbf\x3c\x8f\xcb\x25\xc8\x3f\x00\xdd\x58\x6b\x2e\x40\x00\x00\x00\xff\xff\x4b\x80\x0c\xe2\x7e\x00\x00\x00")

func migrations20150924NamespacesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20150924NamespacesSql,
		"migrations/20150924-namespaces.sql~",
	)
}

func migrations20150924NamespacesSql() (*asset, error) {
	bytes, err := migrations20150924NamespacesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20150924-namespaces.sql~", size: 126, mode: os.FileMode(420), modTime: time.Unix(1443111400, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _migrations20150927CoreSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x5d\x73\xa2\x3c\x14\xbe\xe7\x57\x9c\x3b\xf5\x7d\xeb\x1f\xa8\x57\x29\xa4\x2d\xb3\x08\x6e\x80\xee\xb8\x37\x4c\x2a\xa9\xcd\xac\x06\x1a\x42\x3f\xfe\xfd\x06\x14\x41\x3e\x5c\x75\x66\x2f\x96\x8b\x0e\x4d\xce\xe7\x73\x9e\xf3\xe0\x74\x0a\xd3\xff\xa6\xb0\x4d\x62\x76\x0b\xd9\xdb\x66\x56\xfc\x99\xa6\x32\x89\xf3\x95\xba\x85\x34\xc9\xd4\x5a\xb2\xac\x30\x32\xb4\xed\xff\x5b\xbe\x96\x54\x31\x08\x53\xc3\x24\x18\x05\x18\x02\x74\xe7\x60\x10\x74\xcb\xb2\x94\xae\xd8\xd8\x80\xdd\xc3\x63\xf0\x31\xb1\x91\x03\x0b\x62\xcf\x11\x59\xc2\x37\xbc\xbc\xa9\x6e\x0b\x7b\x78\x42\xc4\x7c\x44\x04\x42\xd7\xfe\x1e\x62\x70\xbd\x00\xdc\xd0\x71\x8c\xc9\xcc\x38\x8e\xfe\x91\xc8\x5f\x51\x96\xb2\xd5\x05\xd1\xcb\x6a\x22\x6d\x67\xbb\x01\x7e\xc0\xa4\x0e\x0f\x3d\x0f\xc1\xf7\x98\x60\xd7\xc4\x7e\xa3\x15\x1e\x4f\xc0\x73\xc1\xc2\x0e\xd6\xa5\x98\xc8\x37\x91\x85\xfb\x5b\xa8\x82\x1f\x6e\x63\xaa\x28\xdc\x2d\x03\x8c\xba\x77\xa9\xe4\x89\xe4\xea\xab\x53\xda\xc1\xe2\x83\xf1\xf5\xab\x1a\xbe\x4f\x69\x9e\xb1\x18\xee\x3c\xcf\xc1\xc8\xed\xde\xaf\x12\xa1\xb8\xc8\x93\x3c\x3b\x61\x43\x45\xf4\xcc\xa2\x73\x4c\xb9\x50\x4c\xbe\xd3\x4d\x59\x10\x79\xd2\xa8\x77\x4c\x04\xfb\x54\xcd\x58\x81\x3d\xc7\x7e\x80\xe6\x0b\xf8\x61\x07\x8f\xe5\xbf\xf0\xd3\x73\x6b\xf8\xb6\xf4\x33\x92\xb9\x10\x5c\xac\x87\xfb\x2c\x8c\xa8\x52\x6c\x9b\xaa\x2c\x92\x4c\xe5\x52\xb0\xee\x44\x8f\x8b\x38\x90\x25\x3a\x3d\xa1\x96\x71\x2a\x59\x99\x66\x18\x05\xd3\x73\xfd\x80\x20\x9d\xbd\x26\x64\x94\x0b\xfe\x96\xb3\x5d\xaa\x1d\x8f\xc7\x4d\xf6\xdd\x94\x34\x99\x0c\x50\x5a\x3b\xab\x33\x29\x5d\x67\xbc\x82\xd2\xf5\xfe\xfc\x75\x4a\x5b\x5e\x58\xb4\xb7\x20\xd8\xb4\x7d\xdb\xeb\x81\x91\xae\x14\x7f\x67\xd5\x58\x1b\xed\x0c\x02\x5d\xc0\xd4\x07\x74\x13\x93\x93\x40\x33\xf9\xef\x08\x47\x4a\x25\x13\xf5\xea\xb7\xa6\xa8\x3b\x39\x0e\xee\xe3\x5e\x78\x87\x59\x5c\x48\xfd\xf0\x06\x9d\x9a\x31\xfb\x4c\xb9\x16\x7f\x9e\x88\xc1\xed\xee\x3a\x6d\x68\xa6\x67\x97\xc6\xc5\x47\xe3\x7c\xaf\x16\x03\x98\xbc\x66\xcf\x96\x0b\x0c\x15\xcb\x32\x45\x95\x56\x25\xe4\x03\x76\xc3\xf9\x78\x94\x32\x11\x6b\xe5\x19\xdd\xc0\xa8\x6c\x8b\xc5\xc5\xeb\x0b\x17\x3c\x7b\x2d\xde\xab\x42\x46\x2f\x94\x6f\x76\x97\x5a\x7e\xe4\x17\x7d\xde\xb0\x51\x87\x63\xfb\x2c\x97\xac\x72\xc9\xe9\x6b\x57\xb9\xd4\x8d\xd3\x24\xdb\xc3\x76\x56\x86\x3f\x71\xac\x1d\x7b\x0f\x66\x0b\xdb\x2a\xbe\xf6\xba\x47\xa1\x13\x40\x0d\x72\x97\x5d\xcd\x58\x52\x45\x8a\x6f\x2f\xa1\x87\x8e\x7b\xda\xa5\x87\xb3\x97\xe6\x18\xd8\xa3\x43\x77\x01\x09\x71\x49\x37\xe4\xe8\x6f\x62\x5b\xd5\xf7\x51\x90\x65\xf5\xab\x59\x4b\x04\xf5\xb7\x95\xc7\x7b\x9f\x7b\x8f\x60\xfb\xc1\x2d\x28\x03\xe3\x8e\x58\x4e\x9a\xd3\xaa\x78\xa7\x8f\xf7\xce\x5d\x61\xd0\x15\x36\x7f\xb8\x59\xc9\x87\xe8\x2f\x19\x2c\xe2\x2d\xce\xaf\x76\x66\x94\xf6\x47\x0b\x50\x9d\x75\x37\xef\xc8\x7a\x47\xb2\xce\x51\x99\xab\x7b\x5a\x08\xfc\xd1\xe9\x61\xef\x67\xc6\xef\x00\x00\x00\xff\xff\x3d\x99\xdb\xbf\xbf\x0a\x00\x00")

func migrations20150927CoreSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20150927CoreSql,
		"migrations/20150927-core.sql",
	)
}

func migrations20150927CoreSql() (*asset, error) {
	bytes, err := migrations20150927CoreSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20150927-core.sql", size: 2751, mode: os.FileMode(420), modTime: time.Unix(1443447734, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _migrations20150927CoreSql2 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x5d\x73\xa2\x3c\x14\xbe\xe7\x57\x9c\x3b\xf5\x7d\xeb\x1f\xa8\x57\x29\xa4\x2d\xb3\x08\x6e\xc0\xee\xb8\x37\x4c\x2a\xa9\xcd\xac\x06\x1a\x42\x3f\xfe\xfd\x26\x28\x8a\x7c\xb8\xea\xcc\x5e\x2c\x17\x0e\xe6\x7c\x9f\xf3\x9c\x27\x8c\xc7\x30\xfe\x6f\x0c\x9b\x34\x61\xb7\x90\xbf\xad\x27\xe6\x67\x9c\xc9\x34\x29\x96\xea\x16\xb2\x34\x57\x2b\xc9\x72\xa3\x64\x69\xdd\xff\x37\x7c\x25\xa9\x62\x30\xcf\x2c\x9b\x60\x14\x61\x88\xd0\x9d\x87\x41\xd0\x0d\xcb\x33\xba\x64\x43\x0b\xb6\x0f\x4f\x20\xc4\xc4\x45\x1e\xcc\x88\x3b\x45\x64\x01\xdf\xf0\xe2\xa6\x92\x1a\x7d\x78\x42\xc4\x7e\x44\x04\xe6\xbe\xfb\x7d\x8e\xc1\x0f\x22\xf0\xe7\x9e\x67\x8d\x26\xd6\xb1\xf7\x8f\x54\xfe\x8a\xf3\x8c\x2d\x2f\xf0\x5e\x66\x13\x6b\x3d\xd7\x8f\xf0\x03\x26\x07\xf7\xd0\xf1\x10\x7c\x8f\x09\xf6\x6d\x1c\xd6\x4a\xe1\xc9\x08\x02\x1f\x1c\xec\x61\x9d\x8a\x8d\x42\x1b\x39\xb8\xbb\x84\xca\xf9\x5e\x9a\x50\x45\xe1\x6e\x11\x61\xd4\x96\x65\x92\xa7\x92\xab\xaf\x56\x6a\x7b\x8d\x0f\xc6\x57\xaf\xaa\x5f\x9e\xd1\x22\x67\x09\xdc\x05\x81\x87\x91\xdf\x96\x2f\x53\xa1\xb8\x28\xd2\x22\x3f\xa1\x43\x45\xfc\xcc\xe2\x73\x54\xb9\x50\x4c\xbe\xd3\x75\x99\x10\x79\xd2\x5d\x6f\xa9\x08\xf6\xa9\xea\xbe\x22\x77\x8a\xc3\x08\x4d\x67\xf0\xc3\x8d\x1e\xcb\xbf\xf0\x33\xf0\x71\xdb\x72\x43\x3f\x63\x59\x08\xc1\xc5\xaa\xbf\x60\xa3\x44\x95\x62\x9b\x4c\xe5\xb1\x64\xaa\x90\x82\xb5\x47\x7b\x9c\xcd\x1e\x35\xf1\xe9\x51\x35\x94\x33\xc9\xca\x30\xfd\xed\xb0\x03\x3f\x8c\x08\xd2\xd1\x0f\xc8\x8c\x0b\xc1\xdf\x0a\xb6\x0d\xb5\x05\xf4\xb0\x0e\xc3\x9b\x12\x2f\xa3\x1e\x6c\x6b\x63\x75\x26\xb6\x0f\x11\xaf\xc0\xf6\x61\x91\xfe\x3a\xb6\x9d\x60\x6e\xca\x9b\x11\x6c\xbb\xa1\x1b\x74\xb4\x91\x2e\x15\x7f\x67\xd5\x58\x6b\xe5\xf4\x36\xda\xb4\xa9\xab\xd1\xf5\x9e\x9c\x6c\x34\x93\xff\x0e\x83\x64\x54\x32\x71\xe0\x80\xc6\x14\x75\x25\xc7\xce\x43\xdc\xd9\xde\x7e\x14\x1b\xce\xef\xdf\xa0\x53\x33\x66\x9f\x19\xd7\xb7\x00\x4f\xc5\x05\x6b\xbe\xa6\xb9\x9e\x5d\x96\x98\xdb\xe3\x7c\xab\x06\x02\x98\xbc\x66\xcf\x16\x33\x0c\x15\xca\x72\x45\x95\xa6\x27\x14\x02\xf6\xe7\xd3\xe1\x20\x63\x22\xd1\xcc\x33\xb8\x81\x41\x59\x16\x4b\xcc\xeb\x0b\x17\x3c\x7f\x35\xef\x55\x22\x83\x17\xca\xd7\x5b\xa1\xa6\x1f\xf9\x45\x9f\xd7\x6c\xd0\xc2\xd8\x2e\xca\x25\xab\x5c\x62\xfa\xda\x55\x2e\x79\xe3\x34\xc8\x76\x6d\x3b\x2b\xc2\x9f\x30\xd6\xf4\xbd\x6b\x66\xa3\xb7\x17\x61\x49\xdb\x48\x15\x2b\xbe\xb9\x04\x15\x7a\x66\x17\x9b\xec\x31\x7b\xb6\xa5\x99\x2e\xf2\xf4\x85\xd7\x64\xea\x9d\x4f\xe4\x38\xdd\x0c\xd5\x20\x36\x7d\x71\xf2\x64\x67\x73\x1f\x10\xec\x3e\xf8\x06\x06\x30\x6c\x11\xe0\xa8\x3e\x81\x0a\x4b\xfa\x78\x67\xdc\x5e\x76\x9d\x61\xfd\xab\xcc\x49\x3f\x44\x77\xca\xe0\x90\x60\x76\x7e\xb6\x13\xab\xd4\x3f\x02\x75\x75\xd6\xde\xa6\x23\xed\x2d\x70\x5a\x47\x65\xac\xf6\xa9\x21\xed\xa3\xd3\xfd\x2e\x4f\xac\xdf\x01\x00\x00\xff\xff\x58\xc7\x2d\x6e\x9c\x0a\x00\x00")

func migrations20150927CoreSql2Bytes() ([]byte, error) {
	return bindataRead(
		_migrations20150927CoreSql2,
		"migrations/20150927-core.sql~",
	)
}

func migrations20150927CoreSql2() (*asset, error) {
	bytes, err := migrations20150927CoreSql2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20150927-core.sql~", size: 2716, mode: os.FileMode(420), modTime: time.Unix(1443355184, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20150924-namespaces.sql~": migrations20150924NamespacesSql,
	"migrations/20150927-core.sql": migrations20150927CoreSql,
	"migrations/20150927-core.sql~": migrations20150927CoreSql2,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20150924-namespaces.sql~": &bintree{migrations20150924NamespacesSql, map[string]*bintree{
		}},
		"20150927-core.sql": &bintree{migrations20150927CoreSql, map[string]*bintree{
		}},
		"20150927-core.sql~": &bintree{migrations20150927CoreSql2, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

